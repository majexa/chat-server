// Generated by CoffeeScript 1.11.1
(function() {
  var MessageActions;

  MessageActions = (function() {
    function MessageActions(db) {
      this.db = db;
    }

    MessageActions.prototype.saveViewed = function(messages, ownUserId, viewed, onComplete) {
      var _save, saveAll, total;
      if (!ownUserId) {
        throw new Error('ownUserId not defined');
      }
      if (!onComplete) {
        onComplete = function() {};
      }
      total = messages.length;
      ownUserId = this.db.ObjectID(ownUserId);
      _save = (function(message, callback) {
        return this.db.collection('mViewed').updateOne({
          messageId: message._id,
          chatId: message.chatId,
          ownUserId: ownUserId,
          viewed: viewed
        }, {
          messageId: message._id,
          chatId: message.chatId,
          ownUserId: ownUserId,
          viewed: viewed
        }, {
          upsert: true
        }, function(err, r) {
          console.log('save mViewed ' + viewed + '; msgId=' + message._id);
          return callback();
        });
      }).bind(this);
      saveAll = function() {
        var message;
        message = messages.pop();
        return _save(message, function() {
          if (--total) {
            return saveAll();
          } else {
            return onComplete();
          }
        });
      };
      return saveAll();
    };

    MessageActions.prototype.setViewed = function(messageIds, ownUserId, viewed, onComplete) {
      messageIds = messageIds.map((function(id) {
        return this.db.ObjectID(id);
      }).bind(this));
      return this.db.collection('messages').find({
        _id: {
          $in: messageIds
        }
      }).toArray((function(err, messages) {
        return this.saveViewed(messages, ownUserId, viewed, onComplete);
      }).bind(this));
    };

    MessageActions.prototype.send = function(userId, chatId, message, onComplete) {
      chatId = this.db.ObjectID(chatId);
      userId = this.db.ObjectID(userId);
      message = {
        userId: userId,
        chatId: chatId,
        message: message
      };
      return this.db.collection('messages').insertOne(message, (function(err, r) {
        return this.db.collection('chatUsers').find({
          chatId: chatId
        }, {
          userId: 1
        }).toArray((function(err, records) {
          var i, len, n, record, results;
          console.log('adding messages for ' + records.length + ' users');
          n = records.length;
          results = [];
          for (i = 0, len = records.length; i < len; i++) {
            record = records[i];
            results.push(this.setViewed([message._id], record.userId, record.userId.toString() === userId.toString(), function() {
              n--;
              if (n === 0) {
                return onComplete(message);
              }
            }));
          }
          return results;
        }).bind(this));
      }).bind(this));
    };

    MessageActions.prototype.getUnseen = function(ownUserId, chatId, onComplete) {
      console.log(ownUserId + ' ---- ' + chatId);
      return this.db.collection('mViewed').find({
        ownUserId: this.db.ObjectID(ownUserId),
        chatId: this.db.ObjectID(chatId)
      }, {
        messageId: 1
      }).toArray((function(err, items) {
        var messageIds;
        if (!items.length) {
          console.log('no unseen');
          onComplete([]);
          return;
        }
        messageIds = items.map(function(item) {
          return item.messageId;
        });
        console.log('get unseen by ' + messageIds);
        return this.db.collection('messages').find({
          _id: {
            $in: messageIds
          }
        }).toArray(function(err, messages) {
          return onComplete(messages);
        });
      }).bind(this));
    };

    MessageActions.prototype.addViewedStatus = function(messages, onComplete) {
      var messageIds;
      messageIds = messages.map(function(message) {
        return message._id;
      });
      return this.db.collection('mViewed').find({
        messageId: {
          $in: messageIds
        }
      }, {
        viewed: 1,
        ownUserId: 1
      }).toArray(function(err, statuses) {});
    };

    MessageActions.prototype.getViewStatuses = function(messageId, onComplete) {
      return this.db.collection('mViewed').find({
        messageId: messageId
      }).toArray(function(err, statuses) {
        console.log('################');
        console.log(statuses);
        return onComplete(statuses);
      });
    };

    return MessageActions;

  })();

  module.exports = MessageActions;

}).call(this);

//# sourceMappingURL=MessageActions.js.map
