// Generated by CoffeeScript 1.11.1
(function() {
  var Pagination, tmpl;

  tmpl = function(tpl, data) {
    var match, re;
    re = /<%=([^%>]+)?%>/;
    while (match = re.exec(tpl)) {
      tpl = tpl.replace(match[0], data[match[1].trim()] || '');
    }
    return tpl;
  };

  Pagination = (function() {
    Pagination.prototype.options = {
      n: 50,
      maxPages: 5,
      sep: '',
      type: '',
      tmpl: '<a href="<%= link %>"><span><%= title %></span></a>',
      tmplSelected: '<b><span><%= title %></span></b>',
      basePath: ''
    };

    function Pagination(options) {
      this.options = Object.assign(this.options, options);
    }

    Pagination.prototype.data = function(req, totalCount) {
      var d, descN, html, i, j, limit, links, offset, pNext, pPrev, page, pageNumber, pagesN, qstr2, ref;
      page = req.params.pg || 1;
      if (page <= 0) {
        page = 1;
      }
      if (this.options.n === 0) {
        pagesN = 0;
      } else {
        if (totalCount) {
          pagesN = Math.ceil(totalCount / this.options.n);
        } else {
          pagesN = 1;
        }
      }
      if (page > pagesN) {
        page = pagesN;
      }
      if (this.options.desc) {
        page = pagesN - page + 1;
      }
      html = '';
      links = pNext = pPrev = [];
      if (pagesN !== 0 && pagesN !== 1) {
        links = [];
        descN = 0;
        for (i = j = 0, ref = pagesN; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          pageNumber = i + 1;
          descN--;
          if (i <= page - Math.round(this.options.maxPages / 2) - 1 || i >= page + Math.round(this.options.maxPages / 2) - 1) {
            continue;
          }
          if (this.options.basePath === '/') {
            qstr2 = this.options.basePath + 'pg';
          } else {
            qstr2 = this.options.basePath + '/pg';
          }
          qstr2 += this.options.type + pageNumber;
          this.options.type + pageNumber;
          d = {
            title: pageNumber,
            link: qstr2
          };
          if ((i + 1) === page) {
            links.push(tmpl(this.options.tmplSelected, d));
          } else {
            links.push(tmpl(this.options.tmpl, d));
          }
          if (page !== pagesN) {
            pNext = this.options.basePath + '/pg' + this.options.type + (page + 1);
          }
          if (page - 1 !== 0) {
            pPrev = this.options.basePath + '/pg' + this.options.type + (page - 1);
          }
        }
      }
      if (links.length > 0) {
        html = links.join(this.options.sep);
      }
      if (this.options['n'] === 0) {
        limit = '';
      } else {
        offset = (page - 1) * this.options.n;
        limit = this.options.n;
      }
      return {
        pNums: html,
        offset: offset,
        limit: limit,
        page: page,
        totalItems: totalCount,
        totalPages: links.length,
        pNext: pNext,
        pPrev: pPrev
      };
    };

    return Pagination;

  })();

  module.exports = Pagination;

}).call(this);

//# sourceMappingURL=Pagination.js.map
