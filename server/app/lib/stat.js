// Generated by CoffeeScript 1.11.1
(function() {
  module.exports = {
    startCollecting: function(server) {
      var getSize;
      getSize = require('get-folder-size');
      setInterval(function() {
        return getSize(server.config.appFolder + '/public/uploads', function(err, uploadsSize) {
          return db.stats(function(err, dbStat) {
            return db.collection('stat').insert({
              time: new Date().getTime(),
              memory: process.memoryUsage().rss,
              cpu: process.cpuUsage().user,
              dbSize: dbStat.dataSize,
              uploadsSize: uploadsSize
            });
          });
        });
      }, 60000 * 10);
      return setInterval(function() {
        return db.collection('users').count({
          status: 'online'
        }, function(err, onlineCount) {
          return db.collection('users').count(function(err, usersCount) {
            return db.collection('usersStat').insert({
              time: new Date().getTime(),
              onlineCount: onlineCount,
              usersCount: usersCount
            });
          });
        });
      }, 60000 * 60 * 24);
    },
    titles: {
      memory: 'Memory',
      cpu: 'CPU',
      dbSize: 'Database Size',
      uploadSize: 'Uploads folder size'
    },
    userTitles: {
      onlineCount: 'Online Users',
      usersCount: 'Registered Users'
    },
    adminResultHandler: function(db, req, res) {
      return db.collection('stat').find().sort({
        time: -1
      }).limit(20).toArray((function(err, records) {
        return db.collection('usersStat').find().sort({
          time: -1
        }).limit(7).toArray((function(err, userRecords) {
          var charts, key, userCharts;
          if (!records && !userRecords) {
            console.log('no stat');
            return;
          }
          records = records.reverse();
          userRecords = userRecords.reverse();
          charts = [];
          for (key in this.titles) {
            charts.push(this.formatChartData(key, records, this.titles));
          }
          userCharts = [];
          for (key in this.userTitles) {
            userCharts.push(this.formatChartData(key, userRecords, this.userTitles));
          }
          return res.send({
            charts: charts,
            userCharts: userCharts
          });
        }).bind(this));
      }).bind(this));
    },
    tts: function(timestamp) {
      var date, formattedTime, hours, minutes;
      date = new Date(timestamp);
      hours = date.getHours();
      minutes = "0" + date.getMinutes();
      formattedTime = hours + ':' + minutes.substr(-2);
      return formattedTime;
    },
    formatChartData: function(key, records, titles) {
      var i, j, json, len, v;
      json = {
        title: titles[key],
        lables: [],
        data: []
      };
      i = 0;
      for (j = 0, len = records.length; j < len; j++) {
        v = records[j];
        i++;
        json.lables.push(this.tts(v.time));
        json.data.push(v[key]);
      }
      return json;
    }
  };

}).call(this);

//# sourceMappingURL=stat.js.map
