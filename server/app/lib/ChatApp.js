// Generated by CoffeeScript 1.12.5
(function() {
  var ChatApp;

  ChatApp = (function() {
    function ChatApp(config) {
      this.config = config;
    }

    ChatApp.prototype.start = function() {
      this.initApp();
      this.initMongo();
      return this.startHttp();
    };

    ChatApp.prototype.initApp = function() {
      var cors;
      this.express = require('express');
      this.path = require('path');
      this.bodyParser = require('body-parser');
      this.app = this.express();
      cors = require('cors');
      this.app.use(cors());
      this.app.use(this.bodyParser.urlencoded({
        extended: true
      }));
      this.app.set('view engine', 'jade');
      console.log(this.path.normalize(this.config.appFolder + '/../views'));
      this.app.set('views', this.path.normalize(this.config.appFolder + '/../views'));
      this.app.use(this.express["static"](this.path.join(this.config.appFolder, 'public')));
      this.app.get('/', (function(req, res) {
        return res.sendFile(this.config.appFolder + '/index.html');
      }).bind(this));
      return this.http = require('http').Server(this.app);
    };

    ChatApp.prototype.initMongo = function(onInit) {
      this.connectMongo((function(db) {
        var Server, server;
        this.initLogger(db);
        require('./cAdminApp')(this, db);
        Server = require('./Server');
        server = new Server(this.config, this.app, db, require('socket.io')(this.http), require('jsonwebtoken'));
        if (onInit) {
          return onInit(server);
        }
      }).bind(this));
      return this.initSession(this.app);
    };

    ChatApp.prototype.initLogger = function(db) {
      var logger;
      return;
      logger = function(req, res, next) {
        var chunks, oldEnd, oldWrite;
        if (!req.url.match(/\/api.*/)) {
          next();
          return;
        }
        oldWrite = res.write;
        oldEnd = res.end;
        chunks = [];
        res.write = function(chunk) {
          chunks.push(chunk);
          return oldWrite.apply(res, arguments);
        };
        res.end = function(chunk) {
          var body;
          console.log(chunk);
          if (chunk) {
            chunks.push(chunk);
          }
          console.log(chunks);
          body = Buffer.concat(chunks).toString('utf8');
          db.collection('logs').insertOne({
            dt: new Date(),
            url: req.url,
            code: res.statusCode,
            body: body
          });
          return oldEnd.apply(res, arguments);
        };
        return next();
      };
      return this.app.use(logger);
    };

    ChatApp.prototype.connectMongo = function(onConnect) {
      var mongoClient, mongodb;
      this.mongoUrl = 'mongodb://localhost:27017/' + this.config.dbName;
      mongodb = require('mongodb');
      mongoClient = mongodb.MongoClient;
      return mongoClient.connect(this.mongoUrl, (function(err, db) {
        if (err) {
          throw new Error(err);
        }
        console.log('mongo connected');
        db.ObjectID = function(id) {
          if (typeof id === 'string') {
            return mongodb.ObjectID(id);
          } else {
            return id;
          }
        };
        return onConnect(db);
      }).bind(this));
    };

    ChatApp.prototype.initMongoStore = function() {
      var MongoStore;
      if (this.mongoStore) {
        return;
      }
      this.session = require('express-session');
      MongoStore = require('connect-mongo')(this.session);
      return this.mongoStore = new MongoStore({
        db: this.config.dbName,
        host: '127.0.0.1',
        port: 27017,
        collection: 'session',
        auto_reconnect: true,
        url: this.mongoUrl
      });
    };

    ChatApp.prototype.initSession = function(app) {
      this.initMongoStore();
      return app.use(this.session({
        cookie: {
          maxAge: 1000 * 60 * 60 * 30
        },
        secret: "the_session_secret",
        store: this.mongoStore
      }));
    };

    ChatApp.prototype.startHttp = function() {
      return this.http.listen(this.config.port, (function() {
        return console.log('listening on *:' + this.config.port);
      }).bind(this));
    };

    return ChatApp;

  })();

  module.exports = ChatApp;

}).call(this);

//# sourceMappingURL=ChatApp.js.map
