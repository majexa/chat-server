// Generated by CoffeeScript 1.11.1
(function() {
  var ChatActions;

  ChatActions = (function() {
    function ChatActions(db) {
      this.db = db;
    }

    ChatActions.prototype.djb2Code = function(str) {
      var char, hash, i;
      hash = 5381;
      i = 0;
      while (i < str.length) {
        char = str.charCodeAt(i);
        hash = (hash << 5) + hash + char;
        i++;
      }
      return hash;
    };

    ChatActions.prototype.cleanup = function(fromUserId, toUserId, onComplete) {
      var chatName;
      chatName = this.chatNameTwoUsers(fromUserId, toUserId);
      return this.db.collection('chat').findOne({
        name: chatName
      }, (function(err, chat) {
        if (!chat) {
          console.log('no chat. nothing to cleanup');
          onComplete();
          return;
        }
        return this.db.collection('messages').remove({}, (function(err, r) {
          console.log('cleanup chat id ' + chat._id + ' messages. deleted: ' + r.result.n);
          return this.db.collection('messageStatuses').remove({}, function(err, r) {
            console.log('cleanup chat id ' + chat._id + ' messageStatuses. deleted: ' + r.result.n);
            return onComplete();
          });
        }).bind(this));
      }).bind(this));
    };

    ChatActions.prototype.chatNameTwoUsers = function(fromUserId, toUserId) {
      var userId1, userId2;
      if (this.djb2Code(fromUserId) < this.djb2Code(toUserId)) {
        userId1 = fromUserId;
        userId2 = toUserId;
      } else {
        userId1 = toUserId;
        userId2 = fromUserId;
      }
      return 'chat-' + userId1 + '-' + userId2;
    };

    ChatActions.prototype.getOrCreateByTwoUsers = function(fromUserId, toUserId, onComplete) {
      var name;
      name = this.chatNameTwoUsers(fromUserId, toUserId);
      fromUserId = this.db.ObjectID(fromUserId);
      toUserId = this.db.ObjectID(toUserId);
      return this.db.collection('chat').findOne({
        name: name
      }, (function(err, chat) {
        if (chat === null) {
          chat = {
            name: name
          };
          return this.db.collection('chat').insertOne(chat, (function(err, r) {
            console.log('chat created ' + chat._id + ', inserting users');
            return this.db.collection('chatUsers').insertMany([
              {
                userId: fromUserId,
                chatId: chat._id
              }, {
                userId: toUserId,
                chatId: chat._id
              }
            ], function(err, r) {
              return this.extendByUsers([fromUserId, toUserId], chat, onComplete);
            });
          }).bind(this));
        } else {
          return this.extendByUsers([fromUserId, toUserId], chat, onComplete);
        }
      }).bind(this));
    };

    ChatActions.prototype.extendByUsers = function(userIds, chat, onComplete) {
      return this.db.collection('users').find({
        _id: {
          $in: userIds
        }
      }, {
        _id: 1,
        login: 1,
        phone: 1
      }).toArray(function(err, _users) {
        var j, len, user, users;
        console.log('chat exists ' + chat._id);
        users = {};
        for (j = 0, len = _users.length; j < len; j++) {
          user = _users[j];
          users[user._id] = user;
        }
        return onComplete({
          users: users,
          chatId: chat._id
        });
      });
    };

    ChatActions.prototype.canJoin = function(userId, chatId, callback) {
      userId = this.db.ObjectID(userId);
      chatId = this.db.ObjectID(chatId);
      return this.db.collection('chat').findOne({
        _id: chatId
      }, (function(err, r) {
        if (r === null) {
          return callback(false, 'chat ' + chatId + 'does not exists');
        } else {
          return this.db.collection('chatUsers').findOne({
            chatId: chatId,
            userId: userId
          }, function(err, r) {
            if (r === null) {
              return callback(false, 'user not in chat');
            } else {
              return callback(true);
            }
          });
        }
      }).bind(this));
    };

    return ChatActions;

  })();

  module.exports = ChatActions;

}).call(this);

//# sourceMappingURL=ChatActions.js.map
