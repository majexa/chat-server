// Generated by CoffeeScript 1.12.0
(function() {
  var ChatActions;

  ChatActions = (function() {
    function ChatActions(db) {
      this.db = db;
    }

    ChatActions.prototype.djb2Code = function(str) {
      var char, hash, i;
      hash = 5381;
      i = 0;
      while (i < str.length) {
        char = str.charCodeAt(i);
        hash = (hash << 5) + hash + char;
        i++;
      }
      return hash;
    };

    ChatActions.prototype.cleanup = function(fromUserId, toUserId, onComplete) {
      var chatName;
      chatName = this.chatNameTwoUsers(fromUserId, toUserId);
      return this.db.collection('chat').findOne({
        name: chatName
      }, (function(err, chat) {
        if (!chat) {
          console.log('no chat. nothing to cleanup');
          onComplete();
          return;
        }
        return this.db.collection('messages').remove({}, (function(err, r) {
          console.log('cleanup chat id ' + chat._id + ' messages. deleted: ' + r.result.n);
          return this.db.collection('messageStatuses').remove({}, function(err, r) {
            console.log('cleanup chat id ' + chat._id + ' messageStatuses. deleted: ' + r.result.n);
            return onComplete();
          });
        }).bind(this));
      }).bind(this));
    };

    ChatActions.prototype.chatNameTwoUsers = function(fromUserId, toUserId) {
      var userId1, userId2;
      if (this.djb2Code(fromUserId) < this.djb2Code(toUserId)) {
        userId1 = fromUserId;
        userId2 = toUserId;
      } else {
        userId1 = toUserId;
        userId2 = fromUserId;
      }
      return 'chat-' + userId1 + '-' + userId2;
    };

    ChatActions.prototype.getOrCreateByTwoUsers = function(fromUserId, toUserId, onComplete) {
      var name;
      name = this.chatNameTwoUsers(fromUserId, toUserId);
      fromUserId = this.db.ObjectID(fromUserId);
      toUserId = this.db.ObjectID(toUserId);
      return this.db.collection('chat').findOne({
        name: name
      }, (function(err, chat) {
        if (chat === null) {
          chat = {
            name: name
          };
          return this.db.collection('chat').insertOne(chat, (function(err, r) {
            console.log('chat created ' + chat._id + ', inserting users');
            return this.db.collection('chatUsers').insertMany([
              {
                userId: fromUserId,
                chatId: chat._id
              }, {
                userId: toUserId,
                chatId: chat._id
              }
            ], (function(err, r) {
              return this.extendByUsers([fromUserId, toUserId], chat, onComplete);
            }).bind(this));
          }).bind(this));
        } else {
          return this.extendByUsers([fromUserId, toUserId], chat, onComplete);
        }
      }).bind(this));
    };

    ChatActions.prototype.get = function(chatId, onComplete) {
      chatId = this.db.ObjectID(chatId);
      return this.db.collection('chat').findOne({
        _id: chatId
      }, (function(err, chat) {
        if (chat === null) {
          return onComplete(false);
        } else {
          return this.db.collection('chatUsers').find({
            chatId: chat._id
          }, {
            userId: 1
          }).toArray((function(err, users) {
            var userIds;
            userIds = users.map(function(user) {
              return user.userId;
            });
            return this.extendByUsers(userIds, chat, onComplete);
          }).bind(this));
        }
      }).bind(this));
    };

    ChatActions.prototype.userPublicFields = {
      _id: 1,
      login: 1,
      phone: 1,
      status: 1,
      lastOnline: 1
    };

    ChatActions.prototype.extendByUsers = function(userIds, chat, onComplete) {
      return this.db.collection('users').find({
        _id: {
          $in: userIds
        }
      }, this.userPublicFields).toArray(function(err, _users) {
        var j, len, user, users;
        users = {};
        for (j = 0, len = _users.length; j < len; j++) {
          user = _users[j];
          users[user._id] = user;
        }
        return onComplete({
          users: Object.values(users),
          chatId: chat._id
        });
      });
    };

    ChatActions.prototype.canJoin = function(userId, chatId, callback) {
      userId = this.db.ObjectID(userId);
      chatId = this.db.ObjectID(chatId);
      return this.db.collection('chat').findOne({
        _id: chatId
      }, (function(err, r) {
        if (r === null) {
          return callback(false, 'chat ' + chatId + 'does not exists');
        } else {
          return this.db.collection('chatUsers').findOne({
            chatId: chatId,
            userId: userId
          }, function(err, r) {
            if (r === null) {
              return callback(false, 'user not in chat');
            } else {
              return callback(true);
            }
          });
        }
      }).bind(this));
    };

    ChatActions.prototype.getByUser = function(userId, callback) {
      return this.db.collection('chatUsers').find({
        userId: this.db.ObjectID(userId)
      }).toArray((function(err, chats) {
        var _chats, chat, chatIds, j, len;
        _chats = {};
        chatIds = [];
        for (j = 0, len = chats.length; j < len; j++) {
          chat = chats[j];
          _chats[chat.chatId] = {
            chatId: chat.chatId
          };
          chatIds.push(chat.chatId);
        }
        return this.db.collection('messages').aggregate([
          {
            $match: {
              chatId: {
                $in: chatIds
              }
            }
          }, {
            $sort: {
              chatId: 1,
              createTime: -1
            }
          }, {
            $group: {
              _id: "$chatId",
              createTime: {
                $first: "$createTime"
              },
              messageId: {
                $first: "$_id"
              },
              userId: {
                $first: "$userId"
              },
              toUserId: {
                $first: "$toUserId"
              },
              message: {
                $first: "$message"
              }
            }
          }
        ]).toArray((function(err, messages) {
          var chatId, k, len1, message;
          for (k = 0, len1 = messages.length; k < len1; k++) {
            message = messages[k];
            chatId = message._id;
            _chats[message._id].message = message;
            _chats[message._id].message.chatId = chatId;
            delete _chats[message._id].message._id;
          }
          return this.db.collection('chatUsers').find({
            chatId: {
              $in: chatIds
            }
          }).toArray((function(err, chatUsers) {
            var chatUser, l, len2, len3, m, userId2ChatId, userIds;
            userId2ChatId = {};
            for (l = 0, len2 = chatUsers.length; l < len2; l++) {
              chatUser = chatUsers[l];
              userId2ChatId[chatUser.userId] = chatUser.chatId;
            }
            userIds = [];
            for (m = 0, len3 = chatUsers.length; m < len3; m++) {
              chatUser = chatUsers[m];
              userIds.push(chatUser.userId);
            }
            return this.db.collection('users').find({
              _id: {
                $in: userIds
              }
            }, this.userPublicFields).toArray(function(err, users) {
              var _chat, len4, n, user;
              for (n = 0, len4 = users.length; n < len4; n++) {
                user = users[n];
                _chat = _chats[userId2ChatId[user._id]];
                if (!_chat.users) {
                  _chat.users = [];
                }
                _chat.users.push(user);
              }
              return callback(Object.values(_chats));
            });
          }).bind(this));
        }).bind(this));
      }).bind(this));
    };

    return ChatActions;

  })();

  module.exports = ChatActions;

}).call(this);

//# sourceMappingURL=ChatActions.js.map
