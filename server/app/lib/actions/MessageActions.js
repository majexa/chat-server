// Generated by CoffeeScript 1.12.0
(function() {
  var FCM, MessageActions, fcm, serverKey;

  FCM = require('fcm-push');

  serverKey = 'AAAAVx6r9YU:APA91bE7htPccdrOh_vZ_aCqRmF91SRbN-XcVZ--xQ8LQSfoANyf-ueag_QpJ6qEMcmCxe8tNsb8iTk7BLUt7hsvn6xaAZGXdyUxweHUViIMf2EHjbv7ucL0OrVVoPgTMqpCzxeQtY-owQrTC1NdclAWZe3uXhgphQ';

  fcm = new FCM(serverKey);

  MessageActions = (function() {
    function MessageActions(db) {
      this.db = db;
    }

    MessageActions.prototype.saveStatuses = function(messages, ownUserId, viewed, onComplete) {
      var _save, saveAll, total;
      if (!ownUserId) {
        throw new Error('ownUserId not defined');
      }
      if (!onComplete) {
        onComplete = function() {};
      }
      total = messages.length;
      ownUserId = this.db.ObjectID(ownUserId);
      _save = (function(message, callback) {
        return this.db.collection('messageStatuses').updateOne({
          messageId: message._id,
          chatId: message.chatId,
          ownUserId: ownUserId
        }, {
          messageId: message._id,
          chatId: message.chatId,
          ownUserId: ownUserId,
          deleted: false
        }, {
          upsert: true
        }, function(err, r) {
          console.log('save messageStatuses ' + viewed + '; msgId=' + message._id);
          return callback();
        });
      }).bind(this);
      saveAll = function() {
        var message;
        message = messages.pop();
        return _save(message, function() {
          if (--total) {
            return saveAll();
          } else {
            return onComplete();
          }
        });
      };
      return saveAll();
    };

    MessageActions.prototype.setStatuses = function(messageIds, ownUserId, viewed, onComplete) {
      messageIds = messageIds.map((function(id) {
        return this.db.ObjectID(id);
      }).bind(this));
      return this.db.collection('messages').find({
        _id: {
          $in: messageIds
        }
      }).toArray((function(err, messages) {
        return this.saveStatuses(messages, ownUserId, viewed, onComplete);
      }).bind(this));
    };

    MessageActions.prototype.send = function(userId, chatId, message, onComplete) {
      chatId = this.db.ObjectID(chatId);
      userId = this.db.ObjectID(userId);
      message = {
        createTime: new Date().getTime(),
        userId: userId,
        chatId: chatId,
        message: message
      };
      return this.db.collection('messages').insertOne(message, (function(err, r) {
        return this.db.collection('chatUsers').find({
          chatId: chatId
        }, {
          userId: 1
        }).toArray((function(err, records) {
          var i, len, n, record, results;
          console.log('adding messages for ' + records.length + ' users');
          n = records.length;
          results = [];
          for (i = 0, len = records.length; i < len; i++) {
            record = records[i];
            results.push(this.setStatuses([message._id], record.userId, record.userId.toString() === userId.toString(), function() {
              n--;
              if (n === 0) {
                return onComplete(message);
              }
            }));
          }
          return results;
        }).bind(this));
      }).bind(this));
    };

    MessageActions.prototype.sendPush = function(userId, message) {
      userId = this.db.ObjectID(userId);
      return this.db.collection('users').findOne({
        _id: userId
      }, function(err, user) {
        var _message;
        if (!user) {
          console.log('user not found');
          return;
        }
        if (!user.deviceToken) {
          console.log('no deviceToken. push skipped');
          return;
        }
        _message = {
          to: user.deviceToken,
          data: message,
          notification: {
            title: 'У Вас новое сообщение',
            body: message.message
          }
        };
        return fcm.send(_message).then(function(response) {
          return console.log("Successfully sent " + message.message + "with response: ", response);
        })["catch"](function(err) {
          console.log("Something has gone wrong!" + message.message);
          return console.error(err);
        });
      });
    };

    MessageActions.prototype.userSend = function(userId, toUserId, chatId, message, isFile, onComplete, onError) {
      userId = this.db.ObjectID(userId);
      toUserId = this.db.ObjectID(toUserId);
      chatId = this.db.ObjectID(chatId);
      isFile = !!isFile;
      message = {
        createTime: new Date().getTime(),
        userId: userId,
        toUserId: toUserId,
        chatId: chatId,
        message: message,
        isFile: isFile,
        viewed: false,
        delivered: false
      };
      return this.db.collection('messages').insertOne(message, (function(err, r) {
        return this.saveStatuses([message], userId, true, (function() {
          return this.saveStatuses([message], toUserId, false, (function() {
            this.sendPush(toUserId, message);
            return onComplete(message);
          }).bind(this));
        }).bind(this));
      }).bind(this));
    };

    MessageActions.prototype.getUnseen = function(ownUserId, onComplete) {
      return this.db.collection('messageStatuses').find({
        ownUserId: this.db.ObjectID(ownUserId),
        viewed: false
      }, {
        messageId: 1
      }).toArray((function(err, items) {
        var messageIds;
        if (!items.length) {
          console.log('no unseen');
          onComplete([]);
          return;
        }
        messageIds = items.map(function(item) {
          return item.messageId;
        });
        return this.db.collection('messages').find({
          _id: {
            $in: messageIds
          }
        }).toArray(function(err, messages) {
          return onComplete(messages);
        });
      }).bind(this));
    };

    MessageActions.prototype.getStatuses = function(messageId, onComplete) {
      return this.db.collection('messageStatuses').find({
        messageId: messageId
      }).toArray(function(err, statuses) {
        return onComplete(statuses);
      });
    };

    MessageActions.prototype.getUserMessages = function(message, onComplete) {
      return this.getStatuses(message._id, function(statuses) {
        var i, len, status, userMessage, userMessages;
        userMessages = {};
        for (i = 0, len = statuses.length; i < len; i++) {
          status = statuses[i];
          userMessage = Object.assign({}, message);
          userMessage.ownUserId = status.ownUserId;
          userMessage.viewed = status.viewed;
          userMessage.delivered = status.delivered;
          userMessages[status.ownUserId] = userMessage;
        }
        return onComplete(userMessages);
      });
    };

    return MessageActions;

  })();

  module.exports = MessageActions;

}).call(this);

//# sourceMappingURL=MessageActions.js.map
