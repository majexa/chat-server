// Generated by CoffeeScript 1.12.0
(function() {
  var MessageActions, SocketEventWrapper, SocketMessageActions;

  MessageActions = require('./MessageActions');

  SocketEventWrapper = require('../SocketEventWrapper');

  SocketMessageActions = (function() {
    function SocketMessageActions(server) {
      this.server = server;
      if (this.called) {
        throw new Error('SocketMessageActions is singletone');
      }
      this.called = true;
      this.server.event.on('newUserMessage', this.newUserMessageEvent.bind(this));
    }

    SocketMessageActions.prototype.isUserInChat = function(userId, chatId) {
      var clients, socket, socketId;
      clients = this.getChatOnlineClients(chatId);
      if (clients === false) {
        return false;
      }
      for (socketId in clients.sockets) {
        socket = this.server.io.sockets.connected[socketId];
        if (socket.userId === userId) {
          return true;
        }
      }
      return false;
    };

    SocketMessageActions.prototype.getChatOnlineClients = function(chatId) {
      var chatClients;
      chatClients = this.server.io.sockets.adapter.rooms[chatId];
      if (!chatClients) {
        return false;
      }
      if (chatClients.sockets.length === 0) {
        return false;
      }
      return chatClients;
    };

    SocketMessageActions.prototype.newUserMessageEvent = function(message) {
      if (!message.toUserId) {
        throw new Error('massage must have toUserId');
      }
      message.toUserId = message.toUserId + '';
      if (this.isUserInChat(message.toUserId) === false) {
        this._newUserMessageEvent(message);
      }
      return this._newChatMessageEvent(message);
    };

    SocketMessageActions.prototype._newUserMessageEvent = function(message) {
      var clients, results, socketId;
      console.log(message);
      clients = this.server.io.sockets.clients();
      console.log('newUserMessage TRY TO SEND');
      results = [];
      for (socketId in clients.connected) {
        if (message.toUserId === clients.connected[socketId].userId) {
          console.log('newUserMessage SENT');
          results.push(new SocketEventWrapper(this.server, clients.connected[socketId]).event({
            type: 'newUserMessages',
            messages: [message]
          }));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    SocketMessageActions.prototype._newChatMessageEvent = function(message) {
      var clients, onlineUserSockets, socket, socketId;
      clients = this.getChatOnlineClients(message.chatId);
      if (clients === false) {
        return;
      }
      onlineUserSockets = {};
      for (socketId in clients.sockets) {
        socket = this.server.io.sockets.connected[socketId];
        onlineUserSockets[socket.userId] = socket;
      }
      return new MessageActions(this.server.db).getUserMessages(message, (function(userMessages) {
        var onlineMessageStatusIds, onlineUserId, results, userMessage;
        onlineMessageStatusIds = [];
        for (userMessage in userMessages) {
          if (onlineUserSockets[userMessage.ownUserId]) {
            onlineMessageStatusIds.push(userMessage._id);
          }
        }
        results = [];
        for (onlineUserId in onlineUserSockets) {
          results.push(new SocketEventWrapper(this.server, onlineUserSockets[onlineUserId]).event({
            type: 'newMessage',
            message: userMessages[onlineUserId]
          }));
        }
        return results;
      }).bind(this));
    };

    return SocketMessageActions;

  })();

  module.exports = SocketMessageActions;

}).call(this);

//# sourceMappingURL=SocketMessageActions.js.map
